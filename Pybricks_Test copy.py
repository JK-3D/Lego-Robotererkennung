from math import pi
import datetime

# Direkte Eingabe deiner CSV-Daten
raw_data = """
2025-08-01T16:43:47.634219,200.00,4.49,178.57
2025-08-01T16:43:47.857287,199.80,4.56,178.24
2025-08-01T16:43:48.078487,200.10,4.29,177.95
2025-08-01T16:43:48.295415,199.83,5.07,179.16
2025-08-01T16:43:48.517459,200.06,4.31,178.33
2025-08-01T16:43:48.752539,199.87,5.05,178.31
2025-08-01T16:43:48.984839,200.09,4.15,178.13
2025-08-01T16:43:49.220134,199.71,4.59,177.81
2025-08-01T16:43:49.451223,200.93,5.76,-179.42
2025-08-01T16:43:49.687270,200.05,7.25,-179.93
2025-08-01T16:43:49.915432,200.14,8.57,179.19
2025-08-01T16:43:50.160961,199.87,9.77,178.74
2025-08-01T16:43:50.390067,200.39,10.72,178.26
2025-08-01T16:43:50.620700,200.09,13.72,178.14
2025-08-01T16:43:50.846894,200.01,15.49,178.14
2025-08-01T16:43:51.073943,199.87,18.30,178.41
2025-08-01T16:43:51.308947,200.14,21.59,178.70
2025-08-01T16:43:51.543313,200.36,23.40,177.82
2025-08-01T16:43:51.767656,199.98,25.66,178.42
2025-08-01T16:43:51.993746,200.42,28.17,178.36
2025-08-01T16:43:52.219915,200.43,31.78,178.08
2025-08-01T16:43:52.445346,200.27,32.64,178.79
2025-08-01T16:43:52.675562,200.73,34.48,178.06
2025-08-01T16:43:52.912820,201.05,36.05,178.16
2025-08-01T16:43:53.136542,200.87,36.70,178.06
2025-08-01T16:43:53.354887,200.99,38.04,177.37
2025-08-01T16:43:53.582043,201.01,40.51,177.77
2025-08-01T16:43:53.815299,200.95,41.54,177.99
2025-08-01T16:43:54.040443,200.95,44.24,178.52
2025-08-01T16:43:54.264733,200.54,47.85,178.18
2025-08-01T16:43:54.496159,200.30,49.04,177.67
2025-08-01T16:43:54.713526,200.95,50.26,178.22
2025-08-01T16:43:54.947147,201.44,52.50,178.66
2025-08-01T16:43:55.182170,201.37,52.87,178.50
2025-08-01T16:43:55.410985,201.96,54.13,-179.05
2025-08-01T16:43:55.634135,202.56,55.94,-174.84
2025-08-01T16:43:55.859225,204.96,58.58,-171.74
2025-08-01T16:43:56.098316,205.63,60.98,-168.93
2025-08-01T16:43:56.316746,206.02,62.57,-166.08
2025-08-01T16:43:56.545315,206.31,67.33,-159.56
2025-08-01T16:43:56.764359,208.88,72.57,-152.66
2025-08-01T16:43:57.000713,158.35,67.57,8.90
2025-08-01T16:43:57.232141,208.90,84.99,-132.34
2025-08-01T16:43:57.470863,206.87,93.20,-119.88
2025-08-01T16:43:57.701911,204.54,96.51,-114.52
2025-08-01T16:43:57.939491,201.78,101.15,-106.07
2025-08-01T16:43:58.180668,198.66,105.80,-96.78
2025-08-01T16:43:58.405170,196.09,108.23,-89.78
2025-08-01T16:43:58.635339,195.66,108.23,-89.80
2025-08-01T16:43:58.859595,195.78,109.54,-91.34
2025-08-01T16:43:59.097669,192.32,108.57,-89.95
2025-08-01T16:43:59.323537,172.84,103.83,-13.87
2025-08-01T16:43:59.561241,183.20,108.06,-93.96
2025-08-01T16:43:59.790553,178.24,109.81,-93.70
2025-08-01T16:44:00.033106,172.93,110.83,-93.40
2025-08-01T16:44:00.284609,171.07,109.51,-94.86
2025-08-01T16:44:00.571244,121.49,99.77,-85.83
2025-08-01T16:44:00.834621,162.55,110.07,-95.33
2025-08-01T16:44:01.120971,131.34,71.96,-153.97
2025-08-01T16:44:01.390160,150.10,110.28,-94.37
2025-08-01T16:44:01.621495,143.29,111.26,-95.60
2025-08-01T16:44:01.862272,114.51,72.32,-8.48
2025-08-01T16:44:02.107659,112.54,74.05,-24.90
2025-08-01T16:44:02.327483,133.10,110.85,-96.38
2025-08-01T16:44:02.552175,90.30,95.16,-30.81
2025-08-01T16:44:02.797121,74.17,103.75,-6.74
2025-08-01T16:44:03.046608,79.41,88.96,-161.85
2025-08-01T16:44:03.262526,123.61,112.94,-93.90
2025-08-01T16:44:03.482829,94.28,95.67,-86.65
2025-08-01T16:44:03.703175,94.21,94.95,-116.99
2025-08-01T16:44:03.913929,122.59,117.49,-92.71
2025-08-01T16:44:04.137973,118.22,113.19,-94.88
2025-08-01T16:44:04.344376,115.04,113.62,-87.31
2025-08-01T16:44:04.548745,118.11,115.57,-90.71
2025-08-01T16:44:04.762954,71.50,70.93,-34.63
2025-08-01T16:44:04.974895,115.77,112.59,-90.86
2025-08-01T16:44:05.197513,106.54,106.01,-93.32
""".strip()

# Parsing der CSV
data = []
for line in raw_data.splitlines():
    timestamp_str, x, y, rotation = line.split(",")
    timestamp = datetime.datetime.fromisoformat(timestamp_str)
    data.append((timestamp, float(x), float(y), float(rotation)))

# print(data)

# Zeitabstände berechnen
base_time = data[0][0]
data = [( (t - base_time).total_seconds(), x, y, rot ) for t, x, y, rot in data]

fahrten = []

# print(data)
for i in range(len(data)-1):
    i += 1
    print(data[i])
    if data[i-1][1]-data[i][1] + data[i-1][2]-data[i][2] >= 0.3 and data[i-1][3]-data[i][3] >= 5:
        print("Kurve")
        fahrten.append(["Kurve", (180*(((data[i-1][1]-data[i][1])**2 + (data[i-1][2]-data[i][2])**2)**0.5))/(pi*(data[i][2]-data[i-1][2])), data[i][2]-data[i-1][2]])
    
    elif data[i-1][1]-data[i][1] + data[i-1][2]-data[i][2] >= 0.3:
        print("Geradeausfahrt")
        fahrten.append(["Geradeausfahrt", ((data[i-1][1]-data[i][1])**2 + (data[i-1][2]-data[i][2])**2)**0.5])

    elif data[i-1][3]-data[i][3] >= 10:
        print("Drehen")
        fahrten.append(["Drehen", data[i][2]-data[i-1][2]])

    else:
        print("Warten")
        fahrten.append(["Warten", data[i][0]-data[i-1][0]])


print(fahrten)

commands = []

for i in range(len(fahrten)):
    if fahrten[i][0] == "Geradeausfahrt":
        commands.append(f"drive_base.straight({round(fahrten[i][1], 2)})")
    
    elif fahrten[i][0] == "Drehen":
        commands.append(f"drive_base.turn({round(fahrten[i][1], 2)})")

    elif fahrten[i][0] == "Kurve":
        commands.append(f"drive_base.curve({round(fahrten[i][1], 2)}, {round(fahrten[i][2], 2)})")

# Pybricks-Code generieren
with open(datetime.datetime.now().strftime("PybricksCode\Pybricks_%Y-%m-%d_%H-%M-%S.py"), "w") as f:
    f.write('''from pybricks.hubs import PrimeHub
from pybricks.pupdevices import Motor
from pybricks.robotics import DriveBase
from pybricks.tools import wait
from pybricks.parameters import Port

hub = PrimeHub()
left_motor = Motor(Port.A)
right_motor = Motor(Port.E)

# Anpassen an deinen Roboter
wheel_diameter = 56  # mm
axle_track = 114     # mm

drive_base = DriveBase(left_motor, right_motor, wheel_diameter, axle_track)

''')
    for cmd in commands:
        f.write(cmd + "\n")

print("✅ Pybricks-Code erfolgreich in 'lego_fahrt.py' gespeichert.")
